---
# tasks file for grafana_installer
- name: Copy grafana RPM packages to /tmp
  copy:
    src: "{{ grafana_filename }}" 
    dest: /tmp/

- name: install grafana RPM packages from a local file
  yum:
    name: "/tmp/{{ grafana_filename }}"
    state: present

- name: Ensure grafana path has been created
  file:
    path: "{{ item }}"
    state: directory
    mode: u=rwx,g=rx,o=rx
    owner: grafana
    group: grafana
  with_items:
    - "{{ grafana_var_path }}"
    - "{{ grafana_var_path }}/plugins"

- name: Copy grafana.ini to /etc/grafana
  template:
    src: grafana.ini.j2 
    dest: /etc/grafana/grafana.ini
    mode: u=rw,g=r,o=
    owner: root
    group: grafana
  notify: Restart grafana service

- name: install the latest version of unzip
  yum:
    name: unzip
    state: present

- name: Unarchive {{ grafana_pluginname }} to remote {{ grafana_var_path }}/plugins
  unarchive:
    src: "{{ item }}"
    dest: "{{ grafana_var_path }}/plugins"
    mode: u=rwx,g=rx,o=rx
    owner: grafana
    group: grafana
  notify: Restart grafana service
  with_items: "{{ grafana_pluginname }}"

- name: Collect facts about system services
  service_facts:

- name: Ensure 3000 port open when firewalld is started
  firewalld:
    port: 3000/tcp
    permanent: true
    state: enabled
    immediate: true
  when: ansible_facts.services['firewalld.service'] is defined
  ignore_errors: yes

- name: Ensure grafana service is started and enabled
  service:
    name: grafana-server
    state: started
    enabled: yes

- name: Set Prometheus Datasource facts
  set_fact:
    prometheus_datasource_payload_data: "{{ prometheus_datasource_payload | regex_replace('datasource_name', prometheus_datasource_name ) | regex_replace('datasource_url', prometheus_datasource_url ) | regex_replace('datasource_type', prometheus_datasource_type ) |regex_replace('datasource_username', prometheus_datasource_username ) | regex_replace('datasource_password', prometheus_datasource_password ) }}"

- name: Set AlertManager Datasource facts
  set_fact:
    alertmanager_datasource_payload_data: "{{ alertmanager_datasource_payload | regex_replace('datasource_name', alertmanager_datasource_name ) | regex_replace('datasource_url', alertmanager_datasource_url ) | regex_replace('datasource_type', alertmanager_datasource_type ) |regex_replace('datasource_username', alertmanager_datasource_username ) | regex_replace('datasource_password', alertmanager_datasource_password ) }}"

- name: Clean Prometheus datasource
  uri:
    url: http://{{ ansible_default_ipv4['address'] }}:3000/api/datasources/name/prometheus
    user: "{{ grafana_username }}"
    password: "{{ grafana_password }}"
    force_basic_auth: true
    method: DELETE
    return_content: yes
    status_code:
    - 200
    - 404
    headers:
      Content-Type: "Content-Type: application/json"
  register: prometheus_datasource_id
  ignore_errors: true

- name: Clean alertmanager datasource
  uri:
    url: http://{{ ansible_default_ipv4['address'] }}:3000/api/datasources/name/alertmanager
    user: "{{ grafana_username }}"
    password: "{{ grafana_password }}"
    force_basic_auth: true
    method: DELETE
    body_format: json
    return_content: yes
    status_code:
    - 200
    - 404
    headers:
      Content-Type: "Content-Type: application/json"
  register: alertmanager_datasource_id
  ignore_errors: true

- debug: var=prometheus_datasource_id

- debug: var=alertmanager_datasource_id

- name: Add Prometheus datasource to grafana
  uri:
    url: http://{{ ansible_default_ipv4['address'] }}:3000/api/datasources
    user: "{{ grafana_username }}"
    password: "{{ grafana_password }}"
    force_basic_auth: true
    method: POST
    body: '{{ prometheus_datasource_payload_data }}'
    body_format: json
    status_code:
    - 200
    - 409
    headers:
      Content-Type: "Content-Type: application/json"
  register: prometheus_datasource_result
  ignore_errors: true

- name: Add AlertManager datasource to grafana
  uri:
    url: http://{{ ansible_default_ipv4['address'] }}:3000/api/datasources
    user: "{{ grafana_username }}"
    password: "{{ grafana_password }}"
    force_basic_auth: true
    method: POST
    body: '{{ alertmanager_datasource_payload_data }}'
    body_format: json
    status_code:
    - 200
    - 409
    headers:
      Content-Type: "Content-Type: application/json"
  register: alertmanager_datasource_result
  ignore_errors: true

- debug: var=prometheus_datasource_result

- debug: var=alertmanager_datasource_result

- name: Copy grafana dashboard json file to /tmp
  local_action:
    module: copy
    src: "{{ item }}"
    dest: "/tmp/{{ item }}"
  with_items:
  - "node_exporter_dashboard.json"
  - "wmi_exporter_dashboard.json"
  - "vmware_exporter_dashboard.json"
  - "mssql_exporter_dashboard.json"
  - "alertmanager_dashboard.json"
  - "overview_dashboard.json"
  - "summary_dashboard.json"
  run_once: true

- name: Clean node exporter dashboard
  grafana_dashboard:
    grafana_url: "http://{{ ansible_default_ipv4['address'] }}:3000"
    url_username: "{{ grafana_username }}"
    url_password: "{{ grafana_password }}"
    uid: nodeexporter
    state: absent
  ignore_errors: true
  delegate_to: localhost

- name: Import node exporter dashboard
  grafana_dashboard:
    grafana_url: "http://{{ ansible_default_ipv4['address'] }}:3000"
    url_username: "{{ grafana_username }}"
    url_password: "{{ grafana_username }}"
    overwrite: true
    state: present
    path: /tmp/node_exporter_dashboard.json
  ignore_errors: true
  delegate_to: localhost

- name: Clean wmi exporter dashboard
  grafana_dashboard:
    grafana_url: "http://{{ ansible_default_ipv4['address'] }}:3000"
    url_username: "{{ grafana_username }}"
    url_password: "{{ grafana_password }}"
    uid: wmiexporter
    state: absent
  ignore_errors: true
  delegate_to: localhost

- name: Import wmi exporter dashboard
  grafana_dashboard:
    grafana_url: "http://{{ ansible_default_ipv4['address'] }}:3000"
    url_username: "{{ grafana_username }}"
    url_password: "{{ grafana_username }}"
    overwrite: true
    state: present
    path: /tmp/wmi_exporter_dashboard.json
  ignore_errors: true
  delegate_to: localhost

- name: Clean vmware exporter dashboard
  grafana_dashboard:
    grafana_url: "http://{{ ansible_default_ipv4['address'] }}:3000"
    url_username: "{{ grafana_username }}"
    url_password: "{{ grafana_password }}"
    uid: vmwareexporter
    state: absent
  ignore_errors: true
  delegate_to: localhost

- name: Import vmware  exporter dashboard
  grafana_dashboard:
    grafana_url: "http://{{ ansible_default_ipv4['address'] }}:3000"
    url_username: "{{ grafana_username }}"
    url_password: "{{ grafana_username }}"
    overwrite: true
    state: present
    path: /tmp/vmware_exporter_dashboard.json
  ignore_errors: true
  delegate_to: localhost

- name: Clean mssql exporter dashboard
  grafana_dashboard:
    grafana_url: "http://{{ ansible_default_ipv4['address'] }}:3000"
    url_username: "{{ grafana_username }}"
    url_password: "{{ grafana_password }}"
    uid: mssqlexporter
    state: absent
  ignore_errors: true
  delegate_to: localhost

- name: Import mssql exporter dashboard
  grafana_dashboard:
    grafana_url: "http://{{ ansible_default_ipv4['address'] }}:3000"
    url_username: "{{ grafana_username }}"
    url_password: "{{ grafana_username }}"
    overwrite: true
    state: present
    path: /tmp/mssql_exporter_dashboard.json
  ignore_errors: true
  delegate_to: localhost

- name: Clean alertmanager dashboard
  grafana_dashboard:
    grafana_url: "http://{{ ansible_default_ipv4['address'] }}:3000"
    url_username: "{{ grafana_username }}"
    url_password: "{{ grafana_password }}"
    uid: alertmanager
    state: absent
  ignore_errors: true
  delegate_to: localhost

- name: Import alertmanger dashboard
  grafana_dashboard:
    grafana_url: "http://{{ ansible_default_ipv4['address'] }}:3000"
    url_username: "{{ grafana_username }}"
    url_password: "{{ grafana_username }}"
    overwrite: true
    state: present
    path: /tmp/alertmanager_dashboard.json
  ignore_errors: true
  delegate_to: localhost

- name: Clean overview dashboard
  grafana_dashboard:
    grafana_url: "http://{{ ansible_default_ipv4['address'] }}:3000"
    url_username: "{{ grafana_username }}"
    url_password: "{{ grafana_password }}"
    uid: overview
    state: absent
  ignore_errors: true
  delegate_to: localhost

- name: Import overview dashboard
  grafana_dashboard:
    grafana_url: "http://{{ ansible_default_ipv4['address'] }}:3000"
    url_username: "{{ grafana_username }}"
    url_password: "{{ grafana_username }}"
    overwrite: true
    state: present
    path: /tmp/overview_dashboard.json
  ignore_errors: true
  delegate_to: localhost

- name: Clean summary dashboard
  grafana_dashboard:
    grafana_url: "http://{{ ansible_default_ipv4['address'] }}:3000"
    url_username: "{{ grafana_username }}"
    url_password: "{{ grafana_password }}"
    uid: summary
    state: absent
  ignore_errors: true
  delegate_to: localhost

- name: Import summary dashboard
  grafana_dashboard:
    grafana_url: "http://{{ ansible_default_ipv4['address'] }}:3000"
    url_username: "{{ grafana_username }}"
    url_password: "{{ grafana_username }}"
    overwrite: true
    state: present
    path: /tmp/summary_dashboard.json
  ignore_errors: true
  delegate_to: localhost

#- name: Create [grafana_datasource] vars datasource
#  grafana_datasource:
#    name: "{{ item.name }}"
#    grafana_url: http://{{ ansible_default_ipv4['address'] }}:3000
#    grafana_user: "{{ grafana_username }}"
#    grafana_password: "{{ grafana_password }}"
#    ds_type: "{{ item.ds_type }}"
#    url: "{{ item.url }}"
#    basic_auth_user: "{{ item.username }}"
#    basic_auth_password: "{{ item.password }}"
#    tls_skip_verify: yes
#    state: present
#  with_items: "{{ grafana_datasource }}"
